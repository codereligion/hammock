package {{package}};

{{#imports}}
import {{.}};
{{/imports}}

@Generated("com.codereligion.hammock.compiler.HammockCompiler")
public final class {{name.simple}} {
{{#closures}}

    private enum {{name.toUpperCamel}}
    {{#predicate}}
        implements Predicate<{{parameterType.simple}}> {
    {{/predicate}}
    {{^predicate}}
        implements Function<{{parameterType.simple}}, {{returnType.simple}}> {
    {{/predicate}}

        INSTANCE;

    {{#predicate}}
        @Override
        {{#nullsafe}}
        public boolean apply(@Nullable {{parameterType.simple}} input) {
            return input != null && input.{{name.toLowerCamel}}();
        }
        {{/nullsafe}}
        {{^nullsafe}}
        public boolean apply({{parameterType.simple}} input) {
            Preconditions.checkNotNull(input, "{{parameterType.simple}}");
            return input.{{name.toLowerCamel}}();
        }
        {{/nullsafe}}
    {{/predicate}}
    {{^predicate}}
        @Nullable
        @Override
        {{#nullsafe}}
        public {{returnType.simple}} apply(@Nullable {{parameterType.simple}} input) {
            return input == null ? null : input.{{name.toLowerCamel}}();
        }
        {{/nullsafe}}
        {{^nullsafe}}
        public {{returnType.simple}} apply({{parameterType.simple}} input) {
            Preconditions.checkNotNull(input, "{{parameterType.simple}}");
            return input.{{name.toLowerCamel}}();
        }
        {{/nullsafe}}
    {{/predicate}}

    }
{{/closures}}

    private {{name.simple}}() {

    }
{{#closures}}

    {{#predicate}}
    public static Predicate<{{parameterType.simple}}> {{name.toLowerCamel}}() {
        return {{name.toUpperCamel}}.INSTANCE;
    }
    {{/predicate}}
    {{^predicate}}
    public static Function<{{parameterType.simple}}, {{returnType.simple}}> {{name.toLowerCamel}}() {
        return {{name.toUpperCamel}}.INSTANCE;
    }
    {{/predicate}}
{{/closures}}

}
