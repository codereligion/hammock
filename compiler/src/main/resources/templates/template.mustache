package {{{package}}};

{{#imports}}
import {{{.}}};
{{/imports}}

@Generated("com.codereligion.hammock.compiler.FirstClassCompiler")
public final class {{{name.simple}}} {
{{#closures}}

    {{#stateless}}
    private enum {{{name.toUpperCamel}}}
    {{/stateless}}
    {{^stateless}}
    private static final class {{{name.toUpperCamel}}}
    {{/stateless}}
    {{#predicate}}
        implements Predicate<{{{input.type.simple}}}> {
    {{/predicate}}
    {{^predicate}}
        implements Function<{{{input.type.simple}}}, {{{returnType.simple}}}> {
    {{/predicate}}

        {{#stateless}}
        INSTANCE;
        {{/stateless}}
        {{^stateless}}
        {{#arguments}}
        private final {{{type.simple}}} {{{name}}};
        {{/arguments}}
            
        private {{{name.toUpperCamel}}}({{{parameterList}}}) {
            {{#arguments}}
            this.{{{name}}} = {{{name}}};
            {{/arguments}}
        }
        {{/stateless}}

    {{#predicate}}
        @Override
        {{#nullsafe}}
        public boolean apply(@Nullable {{{input.type.simple}}} {{{input.name}}}) {
            return {{{input.name}}} != null && {{{delegate}}}.{{{method.toLowerCamel}}}({{{invocationList}}});
        }
        {{/nullsafe}}
        {{^nullsafe}}
        public boolean apply({{{input.type.simple}}} {{{input.name}}}) {
            Preconditions.checkNotNull({{{input.name}}}, "{{{input.type.simple}}}");
            return {{{delegate}}}.{{{method.toLowerCamel}}}({{{invocationList}}});
        }
        {{/nullsafe}}
    {{/predicate}}
    {{^predicate}}
        @Nullable
        @Override
        {{#nullsafe}}
        public {{{returnType.simple}}} apply(@Nullable {{{input.type.simple}}} {{{input.name}}}) {
            return {{{input.name}}} == null ? null : {{{delegate}}}.{{{method.toLowerCamel}}}({{{invocationList}}});
        }
        {{/nullsafe}}
        {{^nullsafe}}
        public {{{returnType.simple}}} apply({{{input.type.simple}}} {{{input.name}}}) {
            Preconditions.checkNotNull({{{input.name}}}, "{{{input.type.simple}}}");
            return {{{delegate}}}.{{{method.toLowerCamel}}}({{{invocationList}}});
        }
        {{/nullsafe}}
    {{/predicate}}

    }
{{/closures}}

    private {{{name.simple}}}() {

    }
{{#closures}}

    {{#predicate}}
    public static Predicate<{{{input.type.simple}}}> {{{name.toLowerCamel}}}({{{parameterList}}}) {
        {{#stateless}}
        return {{{name.toUpperCamel}}}.INSTANCE;
        {{/stateless}}
        {{^stateless}}
        return new {{{name.toUpperCamel}}}({{{argumentList}}});
        {{/stateless}}
    }
    {{/predicate}}
    {{^predicate}}
    public static Function<{{{input.type.simple}}}, {{{returnType.simple}}}> {{{name.toLowerCamel}}}({{{parameterList}}}) {
        {{#stateless}}
        return {{{name.toUpperCamel}}}.INSTANCE;
        {{/stateless}}
        {{^stateless}}
        return new {{{name.toUpperCamel}}}({{{argumentList}}});
        {{/stateless}}
    }
    {{/predicate}}
{{/closures}}

}
